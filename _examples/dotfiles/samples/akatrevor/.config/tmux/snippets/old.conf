#  vim: set ts=2 sw=2 tw=120 et ft=conf :

source-file ~/.tmux/theme.conf

###

#set -g default-command "reattach-to-user-namespace -l zsh"

#set -g mode-mouse on
#setw -g mouse-select-window on
#setw -g mouse-select-pane on

# Copy mode
setw -g mode-keys vi
bind ` copy-mode
unbind [
unbind p
bind p paste-buffer
bind -t vi-copy v begin-selection
bind -t vi-copy y copy-selection
bind -t vi-copy Escape cancel
#bind y run "tmux save-buffer - | reattach-to-user-namespace pbcopy"
bind y run "tmux save-buffer - | pbcopy"

###

set -g prefix C-a

unbind C-b
bind C-a send-prefix

setw -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind L last-window

# start indexing windows from 1, just like tabs
set -g base-index 1

set -g default-terminal "screen-256color"

# do not rename windows
setw -g automatic-rename off

# window titles
set -g set-titles on

# display visible indicator of each pane
#bind-key w display-panes



# Shorten input delay (tmux normally adds a short delay on inputs)
set -sg escape-time 0

# send commands to nested session with ^s s
bind-key s send-prefix

# reload this on 'r'
bind r source-file ~/.tmux.conf

# terminal
set -g default-terminal screen-256color
set -g history-limit 50000

# bells and monitoring
set -g visual-silence on
set -g visual-bell on
set -g bell-action any

##  statusbar
#set-option -g status on
#set-option -g status-interval 2
#set-option -g status-utf8 on
#set-option -g status-justify "centre"
#set-option -g status-left-length 60
#set-option -g status-right-length 90
#set-option -g status-left "#(~/.tmux-powerline/status-left.sh)"
#set-option -g status-right "#(~/.tmux-powerline/status-right.sh)"
#set-option -g status-bg black #base02
#set-option -g status-fg white #yellow
#set-option -g status-attr default

# fix resizing
setw -g aggressive-resize on


# vim resizes
bind - resize-pane -D 1
bind + resize-pane -U 1
bind < resize-pane -L 1
bind > resize-pane -R 1

# vim style split + perserve pwd
bind-key s split-window -c '#{pane_current_path}'
bind-key v split-window -h -c '#{pane_current_path}'

# split or new window path perserve
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# and faster resizes
bind J resize-pane -D 5
bind K resize-pane -U 5
bind H resize-pane -L 5
bind L resize-pane -R 5

# vim copying
setw -g mode-keys vi
bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-selection

# Similar to 'C-w j' to navigate windows in Vim
unbind-key j
bind-key j select-pane -D
unbind-key k
bind-key k select-pane -U
unbind-key h
bind-key h select-pane -L
unbind-key l
bind-key l select-pane -R

# Enable mouse support (works in iTerm)
#set-window-option -g mode-mouse on
#set-option -g mouse-select-pane on
#set-option -g mouse-resize-pane on
#set-option -g mouse-select-window on

# Start windows and panes at 1, not 0
set -g base-index 1
set -g pane-base-index 1

# If we want Vim to be told about focus: http://git.io/2UqSgQ
set -g focus-events on

# try to set wm window titles with xterm codes
set -g set-titles on

# colour support
#set -g default-terminal "xterm"

## fix pbcopy/pbpaste
#if 'command -v reattach-to-user-namespace >/dev/null' \
#    'set -gq @osx-pasteboard true'

#if 'tmux show -gv @osx-clipboard' \
#    'set -g default-command "reattach-to-user-namespace -l $SHELL"'

## Copy top of tmux paste buffer stack to OS clipboard.
## Alternatively, this will always immediately copy to system pasteboard:
## bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
#if 'tmux show -gv @osx-clipboard' \
#    'bind y run "tmux save-buffer - | reattach-to-user-namespace pbcopy"'

# smart pane switching with awareness of vim splits
# see https://github.com/christoomey/vim-tmux-navigator
bind -n C-h if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-h" "select-pane -L"
bind -n C-j if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-j" "select-pane -D"
bind -n C-k if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-k" "select-pane -U"
bind -n C-l if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-l" "select-pane -R"
bind -n "C-\\" if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-\\" "select-pane -l"

# Bring back clear screen under tmux prefix
bind C-l send-keys 'C-l'

bind e setw synchronize-panes on
bind E setw synchronize-panes off

## List of plugins
## Supports `github_username/repo` or full git repo URLs
#set -g @tpm_plugins '              \
#  tmux-plugins/tpm                 \
#  tmux-plugins/tmux-sensible       \
#  tmux-plugins/tmux-copycat        \
#  tmux-plugins/tmux-yank           \
#  tmux-plugins/tmux-open           \
#  tmux-plugins/tmux-logging        \
#  tmux-plugins/tmux-resurrect      \
#  tmux-plugins/tmux-continuum      \
#  tmux-plugins/tmux-urlview        \
#  tmux-plugins/tmux-fpp            \
#'



# swap panes
bind-key -r J swap-pane -D
bind-key -r K swap-pane -U


# copying and pasting
bind-key [ copy-mode
bind-key ] paste-buffer -s \015


# enable mouse selection in copy mode
#setw -g mode-mouse on

# list all paste buffers (default key is '#')
bind-key b list-buffers

# choose buffer to paste interactively (default key was '=')
bind-key p choose-buffer

# delete the most recently copied buffer of text (default key was '-')
# bind-key x delete-buffer

# Clear scrollback history
bind-key C-k clear-history

# Screen-like key bindings

# new window
bind-key C-c new-window
bind-key c new-window

# quit
bind-key \ confirm-before kill-server

# displays
bind-key * list-clients

# Split windows like vim

# vim's definition of a horizontal/vertical split is reversed from tmux's
bind-key s split-window -v
bind-key v split-window -h

# resize panes like vim
bind-key -r < resize-pane -L 3
bind-key -r > resize-pane -R 3
bind-key -r + resize-pane -U 1
bind-key -r = resize-pane -D 1


# Statusbar settings

# use vi-style key bindings in the status line
set -g status-keys vi

# amount of time for which status line messages and other indicators
# are displayed. time is in milliseconds.
set -g display-time 2000

# default statusbar colors
set-option -g status-utf8 on
set-option -g status-fg white
set-option -g status-bg black

setw -g window-status-fg white
setw -g window-status-bg black
setw -g window-status-attr none

setw -g window-status-current-fg red
setw -g window-status-current-bg black
setw -g window-status-current-attr bold

#set-option -g status-left ' ❐ #S#[default]▐'
#set-option -g status-right '▐ ⚡#(~/bin/battery ) ▐ ⌚#(date "+%H:%M") ▐ #(whoami)@#H#[default]'

set-option -g status-right-length 1000
set-option -g status-left-length 60



# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

#bind C-l send-keys 'C-l'

set -g mouse

# On Mac OS X, launching tmux can cause the error launch_msg(...): Socket is not connected to be displayed, which can be fixed by installing reattach-to-user-namespace, available in Homebrew, and adding the following to tmux.conf:
#set-option -g default-command "reattach-to-user-namespace -l $SHELL -l"


# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'


# Start tmux on login
set -g @continuum-boot-options 'iterm'

# Restore last session automagically
set -g @continuum-restore 'on'

# Also save/restore neovim sessions
# for vim
#set -g @resurrect-strategy-vim 'session'
# for neovim
set -g @resurrect-strategy-nvim 'session'

# Restore pane contents
set -g @resurrect-capture-pane-contents 'on'

# regex search
set -g @plugin 'tmux-plugins/tmux-copycat'

# integration with system clipboard
set -g @plugin 'tmux-plugins/tmux-yank'

# Nice highlight when in cmd mode
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'
#set -g @prefix_highlight_fg 'white'
#set -g @prefix_highlight_bg 'blue'


#set -g @tpm_plugins "                  \
#  tmux-plugins/tpm                     \
#  tmux-plugins/tmux-battery            \
#  tmux-plygins/tmux-cpu                \
#  ctjhoa/tmux-jasonwryan-theme         \
#"


# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

